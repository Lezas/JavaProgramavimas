/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package vw;


import java.util.ArrayList;
import ds.Kryptys;
import ds.Labirintas;
import ds.Langelis;
import ds.Taskas;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 *
 * @author Simona
 */
public class Piesinys extends javax.swing.JPanel {

    //cia mastelis, kad paskui galetumem didinti ar mazinti langelio ploti/auksti
    public Langelis dabartinis;
    public Kryptys dabartinio_kryptis;
    public int m;
    //cia labirintas ka piesim
    Labirintas l;
   
    //cia spalvos, kurias reiketu tinkamai naudoti vaizduojant
    public Color s1, s2, s3;

    public void setL(Labirintas l) {
        this.l = l;
    }

    /**
     * Creates new form Piesinys
     */
    public Piesinys() {
        initComponents();
        s1 = Color.GRAY;
        s2 = Color.black;
        s3 = Color.red;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g) {
        m = 50;
        super.paintComponent(g);
        this.setBackground(s1);
        this.setOpaque(true);
        
        if (l != null) {
            //piesti labirinta 
            int a = l.getAukstis();
            int p = l.getPlotis();
            int m1 = this.getWidth() / p;
            int m2 = this.getHeight() / a;
            
            if(m1 > m2){
                m=m2;
            }else{
                m=m1;
            }
            
            Langelis[][] n = l.getLangeliai();
            g.drawLine(0, 0, m * p, 0);
            g.drawLine(0, 0, 0, m * a);
            float dash1[] = {5.0f, 1.0f};
            BasicStroke dashed = new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 5.0f, dash1, 0.0f);
            BasicStroke solid = new BasicStroke(3.0f);
            for (int i = 0; i < a; i++) {
                for (int j = 0; j < p; j++) {
                    Langelis s = n[i][j];
                    if (!s.galiEiti[Kryptys.DESINE.ordinal()]) {
                        g.setColor(s2);
                        ((Graphics2D) g).setStroke(solid);
                    } else {
                        g.setColor(Color.LIGHT_GRAY);
                        ((Graphics2D) g).setStroke(dashed);
                    }
                    g.drawLine(m * (j + 1), m * (i), m * (j + 1), m * (i + 1));
                    if (!s.galiEiti[Kryptys.APACIA.ordinal()]) {
                        g.setColor(s2);
                        ((Graphics2D) g).setStroke(solid);
                    } else {
                        g.setColor(Color.LIGHT_GRAY);
                        ((Graphics2D) g).setStroke(dashed);
                    }
                    g.drawLine(m * (j), m * (i + 1), m * (j + 1), m * (i + 1));
                }
            }
            //cia papildomai pridetumet koda, kuris atvaizduotu visus taskus labirinte
            ArrayList<Taskas> taskai = l.getTaskai();
            
            for (Taskas t : taskai){
                Langelis lan = t.vieta;
                g.setColor(s3);
                g.fillOval(lan.getSt()*m+5,lan.getEil()*m+5 , m-10, m-10);
            
            }
            
            
            //jei bus mouseover, tada pridesite koda, kuris vaizduos ties kuria siena dabar esame
            if(dabartinis != null){
                g.setColor(Color.ORANGE);
                //g.drawRect(dabartinis.getSt()*m,  dabartinis.getEil()*m, m,m);
                
                
                if(this.dabartinio_kryptis.ordinal() == 0 && dabartinis.getEil() > 0){
                    g.drawLine(dabartinis.getSt()*m, dabartinis.getEil()*m, dabartinis.getSt()*m+m, dabartinis.getEil()*m);
                } else
                if(this.dabartinio_kryptis.ordinal() == 1 && dabartinis.getSt() < l.getPlotis()-1){
                    g.drawLine(dabartinis.getSt()*m+m, dabartinis.getEil()*m, dabartinis.getSt()*m+m, dabartinis.getEil()*m+m);
                } else
                if(this.dabartinio_kryptis.ordinal() == 2 && dabartinis.getEil() < l.getAukstis()-1){
                    g.drawLine(dabartinis.getSt()*m, dabartinis.getEil()*m+m, dabartinis.getSt()*m+m, dabartinis.getEil()*m+m);
                } else 
                if(this.dabartinio_kryptis.ordinal() == 3 && dabartinis.getSt() > 0){
                    g.drawLine(dabartinis.getSt()*m, dabartinis.getEil()*m, dabartinis.getSt()*m, dabartinis.getEil()*m+m);
                }
                
            }
        } else {
            g.drawString("Jus neturite susikure labirinto", 10, 10);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
